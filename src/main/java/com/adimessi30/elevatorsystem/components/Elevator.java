package com.adimessi30.elevatorsystem.components;

import com.adimessi30.elevatorsystem.components.abstractions.IdAutoGenerated;
import com.adimessi30.elevatorsystem.enums.Direction;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import java.util.List;
import java.util.Objects;

import static com.adimessi30.elevatorsystem.enums.Direction.IDLE;

@Slf4j
@Getter
@Setter
public class Elevator extends IdAutoGenerated {
    private final int elevatorId;
    private final List<ElevatorButton> buttons;
    private int currentFloor = 0;
    private Direction currentDirection = IDLE;

    public Elevator(List<ElevatorButton> buttons) {
        super();
        this.buttons = buttons;
        this.elevatorId = getId();
    }

    public void pressButton(int buttonId) {
        ElevatorButton elevatorButton = validateAndGetButton(buttonId);
        if (elevatorButton.canPressButton() && !Objects.equals(elevatorButton.getMappedFloor(), currentFloor))
            elevatorButton.requestFloor(elevatorId, currentFloor);
    }

    public void cancelButton(int buttonId) {
        ElevatorButton elevatorButton = validateAndGetButton(buttonId);
        if (elevatorButton.isPressed())
            elevatorButton.cancelFloorRequest(elevatorId, currentFloor);
    }

    private ElevatorButton validateAndGetButton(int buttonId) {
        if (buttonId >= buttons.size())
            throw new IllegalArgumentException("Button id is out of range.......");
        return buttons.get(buttonId);
    }

    protected void postConstruct() {
        log.debug("New elevator instance with id: {} was created......", elevatorId);
    }
}
