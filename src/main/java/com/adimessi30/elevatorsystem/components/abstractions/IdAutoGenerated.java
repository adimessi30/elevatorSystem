package com.adimessi30.elevatorsystem.components.abstractions;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.atomic.AtomicInteger;

public abstract class IdAutoGenerated {
    private static final ConcurrentMap<String, AtomicInteger> instanceCount = new ConcurrentHashMap<>();
    private final int id;

    protected IdAutoGenerated() {
        String className = this.getClass().getSimpleName();
        AtomicInteger count = instanceCount.computeIfAbsent(className, k -> new AtomicInteger(0));
        id = count.getAndIncrement();
    }

    public static int getCount(Class<?> clazz) {
        AtomicInteger count = instanceCount.get(clazz.getSimpleName());
        return count != null ? count.get() : 0;
    }

    public int getId() {
        return id;
    }
}


